#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=100000, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, 'f')
e_data = "%s.%s" % (opts.train, 'e')



bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))][:opts.num_sents]
# Initial para
f_counts = defaultdict(int)
e_counts = defaultdict(int)
fe_counts = defaultdict(int)

for f_sentence, e_sentence in bitext:
  for f_w in set(f_sentence):
    for e_w in set(e_sentence):
      fe_counts[(f_w,e_w)] += 1
      f_counts[f_w] += 1
      e_counts[e_w] += 1


# Initialize P(f|e)
pfe = defaultdict(float)
for pair in fe_counts:
  pfe[pair] = float(fe_counts[pair]) / float(e_counts[pair[1]])
align_=defaultdict(float)
for (n, (f_sentence,e_sentence)) in enumerate(bitext):
  
  l_f = len(f_sentence)
  l_e = len(e_sentence)
  initial_value = float(1) / float(l_f)
  for (i, f_w) in enumerate(f_sentence):
    for (j, e_w) in enumerate(e_sentence):
      align_[(i,j,l_f,l_e)] = initial_value

# EM 
e_counts = defaultdict(int)
fe_counts = defaultdict(int)
align_count=defaultdict(int)
e_align_count=defaultdict(int)
for k in range(10):
  for (n, (f_sentence,e_sentence)) in enumerate(bitext):
    l_f=len(f_sentence)
    l_e=len(e_sentence)
    for (i, f_w) in enumerate(f_sentence):
      Z = 0
      for (j, e_w) in enumerate(e_sentence):
        Z += pfe[(f_w, e_w)]*align_[(i,j,l_f,l_e)]


      for (j, e_w) in enumerate(e_sentence):
        c = pfe[(f_w, e_w)]*align_[(i,j,l_f,l_e)]/Z
        fe_counts[(f_w, e_w)] += c
        e_counts[(e_w)] += c
        align_count[(i,j,l_f,l_e)]+=c
        e_align_count[(j,l_f,l_e)]+=c
  pfe = defaultdict(float)
  for pair in fe_counts:
    pfe[pair] = fe_counts[pair] / e_counts[pair[1]]
  for (n, (f_sentence,e_sentence)) in enumerate(bitext):
    l_f=len(f_sentence)
    l_e=len(e_sentence)
    for (i, f_w) in enumerate(f_sentence):
      for (j, e_w) in enumerate(e_sentence):
        align_[(i,j,l_f,l_e)]=align_count[(i,j,l_f,l_e)]/e_align_count[(j,l_f,l_e)]

for (f_sentence, e_sentence) in bitext:
  l_f=len(f_sentence)
  l_e=len(e_sentence)
  for (i, f_w) in enumerate(f_sentence): 
    best_prob = 0
    best_j = 0
    for (j, e_w) in enumerate(e_sentence):
      if pfe[(f_w,e_w)] * align_[(i,j,l_f,l_e)] >= best_prob:
        best_prob = pfe[(f_w,e_w)]* align_[(i,j,l_f,l_e)]
        best_j = j
    sys.stdout.write("%i-%i " % (i,best_j))
  sys.stdout.write("\n")
